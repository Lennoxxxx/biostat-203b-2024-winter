---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Wenbo Zhao UID:806074910"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: true    
editor_options: 
  chunk_output_type: inline
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.) 

```{r}
file_path <- "~/mimic/hosp/admissions.csv.gz"

# Read file using read.csv from base R
base_read_time <- system.time({
  admissions_base <- read.csv(gzfile(file_path))
})["elapsed"]
base_memory_usage <- object_size(admissions_base)

# Read file using read_csv from tidyverse
tidy_read_time <- system.time({
  admissions_tidy <- read_csv(file_path)
})["elapsed"]
tidy_memory_usage <- object_size(admissions_tidy)

# Read file using fread from data.table
dt_read_time <- system.time({
  admissions_dt <- fread(cmd = paste("zcat <", file_path))
})["elapsed"]
dt_memory_usage <- object_size(admissions_dt)

# Compare read times
read_times <- data.frame(
  Method = c("read.csv", "read_csv", "fread"),
  Time = c(base_read_time, tidy_read_time, dt_read_time),
  Memory_Usage = c(base_memory_usage, tidy_memory_usage, dt_memory_usage)
)

# Print read times and memory usage
print(read_times)
```

```{r}
# Compare default parsed data types
str(admissions_base)
```
```{r}
str(admissions_tidy)
```

```{r}
str(admissions_dt)
```

**ANSWER:** For both processing speed and memory usage, `fread` is the best function for reading the compressed CSV file, closely followed by `read_csv`. Besides, both methods are significantly better than `read.csv` from base R. As for parsed data types, both `fread` and `read_csv` automatically parse date and time columns into POSIXct format, which is more useful for analysis than the chr type that read.csv uses. 

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

```{r}
# Define column types
col_types <- cols(
  subject_id = col_integer(),
  hadm_id = col_integer(),
  admittime = col_datetime(format = ""),
  dischtime = col_datetime(format = ""),
  deathtime = col_datetime(format = ""),
  admission_type = col_character(),
  admit_provider_id = col_character(),
  admission_location = col_character(),
  discharge_location = col_character(),
  insurance = col_character(),
  language = col_character(),
  marital_status = col_character(),
  race = col_character(),
  edregtime = col_datetime(format = ""),
  edouttime = col_datetime(format = ""),
  hospital_expire_flag = col_integer()
)

# Read the CSV with specified column types
system.time({
   admissions_tidy_colType <- read_csv(file_path, col_types = col_types)
})["elapsed"]

# Check memory usage
pryr::object_size(admissions_tidy_colType)
```

**ANSWER:** After indicating column data types, the processing speed slightly improved by 0.092s. 50.13MB of RAM are used which is also better than previous result.

## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings. 

```{r}
file_path <- "~/mimic/hosp/labevents.csv.gz"
```
```{r}
#| eval: false
labevent_df <- read_csv(file_path)
```


**ANSWER:** R crashes and fails to ingest the data. 

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

```{r}
#| eval: false
labevents_selected <- read_csv(
  file=file_path, col_select=c(subject_id, itemid, charttime, valuenum))
head(labevents_selected)
```
**ANSWER:** Now we can read the file but still it takes a relative long time.

### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.)

```{bash}
#| eval: false
zcat ~/mimic/hosp/labevents.csv.gz | 
  awk -F, 'BEGIN {OFS=","} NR==1 || $5 == 50912 || $5 == 50971 || $5 == 50983 ||
  $5 == 50902 || $5 == 50882 || $5 == 51221 || $5 == 51301 || $5 == 50931 
  {print $2, $5, $7, $10}' | gzip > labevents_filtered.csv.gz
```

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

```{r}

filtered_time <- system.time({
  labevents_filtered <- read_csv("labevents_filtered.csv.gz", 
                                 show_col_types = FALSE)
})["elapsed"]

print(paste("Processing Time:", filtered_time))

total_rows <- nrow(labevents_filtered)
print(paste("Total number of rows:", total_rows))

```
```{r}
head(labevents_filtered, n = 10)
```


### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

```{bash}
#| eval: false
gzip -dc ~/mimic/hosp/labevents.csv.gz > labevents.csv

```

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}
library(dplyr)

arrow_time <- system.time({
  dataset <- open_dataset("labevents.csv", format = "csv")
  
  # Select columns and filter rows
  filtered_data <- dataset %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
  
  # Collect the data into a tibble
  result_tibble <- filtered_data %>% collect()
})["elapsed"]

print(paste("Processing Time:", arrow_time))

num_rows <- nrow(result_tibble)
print(paste("Number of rows:", num_rows))

```
```{r}
head(result_tibble, 10)
```

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

**ANSWER:** Apache Arrow is a cross-language development platform for in-memory data which defines a columnar memory format for flat and hierarchical data, enabling efficient analytical operations across various hardware. It enables high-performance data exchange and computation without the need for serialization, benefiting from zero-copy data sharing between systems. 

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}
#| eval: false
#dataset <- read_csv_arrow("labevents.csv")
write_dataset(dataset, "labevents_parquet", format = "parquet")
```
```{r}
parquet_size <- file.info("labevents_parquet/part-0.parquet")$size
print(paste("Parquet file size:", parquet_size/1024/1024/1024, "Gb"))
```
```{r}
parquet_time <- system.time({
  labevents_parquet <- open_dataset("labevents_parquet", format = "parquet")
  
  # Select columns and filter rows
  parquet_data <- labevents_parquet %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
  
  # Collect the data into a tibble
  parquet_tibble <- parquet_data %>% collect()
})["elapsed"]

print(paste("Processing Time:", parquet_time))

num_rows <- nrow(parquet_tibble)
print(paste("Number of rows:", num_rows))

```
```{r}
head(parquet_tibble, 10)
```

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**ANSWER:** The Parquet format is a columnar storage file format optimized for big data analysis, which organizes data into columns rather than rows, which allows for better compression and enhanced read/write efficiency. It's designed to efficiently store and retrieve large volumes of data.

### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}
rm(list = ls())
```

```{r}
library(duckdb)
duckdb_time <- system.time({
  labevents_parquet <- open_dataset("labevents_parquet", format = "parquet")
  duckdb_dataset <- arrow::to_duckdb(labevents_parquet)
  
  # Select columns and filter rows
  duckdb_data <- duckdb_dataset %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
    arrange(subject_id, charttime)
  
  # Collect the data into a tibble
  duckdb_tibble <- duckdb_data %>% collect()
})["elapsed"]

```

```{r}
print(paste("Processing Time:", duckdb_time))

num_rows <- nrow(duckdb_tibble)
print(paste("Number of rows:", num_rows))
```
```{r}
head(duckdb_tibble, 10)
```
Notice that due to the parallel processing of DuckDB, it may return non-deterministic result. We can use sorting to get rid of uncertainty. 


Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**ANSWER:** DuckDB is a fast and light weight in-process analytical database. DuckDB set a powerful spreadsheet engine that can run directly within data analysis tools, like Python or R environments, without the need for setting up a separate database server. 

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

**ANSWER:** For the `chartevents.csv.gz` dataset, we use the Parquet format to ingest and filter the file.

First decompress the `chartevents.csv.gz` to read it by Apache Arrow.
```{bash}
#| eval: false
gzip -dc ~/mimic/icu/chartevents.csv.gz > chartevents.csv

```

Read the `chartevents.csv.gz` with `open_dataset` and write it into Parquet format.
```{r}
#| eval: false
dataset <- open_dataset("chartevents.csv", format = "csv")
write_dataset(dataset, "chartevents_parquet", format = "parquet")
```

Read read the parquet format data and filter.
```{r}
chartevents_parquet <- open_dataset("chartevents_parquet", format = "parquet")
  
# Select columns and filter rows
parquet_data <- chartevents_parquet %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) 

# Collect the data into a tibble
chartevents_tibble <- parquet_data %>% collect()

```

Display the number of rows and the first 10 rows of the result tibble
```{r}
num_rows <- nrow(chartevents_tibble)
print(paste("Number of rows:", num_rows))
```
```{r}
head(chartevents_tibble, 10)
```

