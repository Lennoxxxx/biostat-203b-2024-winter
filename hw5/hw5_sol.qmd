---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Wenbo Zhao 806074910"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: true    
editor_options: 
  chunk_output_type: inline
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

## Data Preprocessing

1. Data preprocessing and feature engineering.
```{r}
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
library(tidymodels)
library(keras)
library(ranger)
library(stacks)
library(xgboost)
library(glmnet)
```
```{r}
mimic_icu_cohort <- readRDS("mimic_icu_cohort.rds")
mimic_icu_cohort <- mimic_icu_cohort |> 
  select(subject_id, hadm_id, stay_id, race, insurance, marital_status, gender, age_at_intime, 
  Bicarbonate, Chloride, Creatinine, Glucose, Potassium, Sodium, 
  Hematocrit, white_blood_cells,
  heart_rate, non_invasive_blood_pressure_systolic, 
  non_invasive_blood_pressure_diastolic, 
  respiratory_rate, temperature_fahrenheit, los_long) |>
  mutate(los_long = as.factor(los_long)) |>
  print(width = Inf)
```

```{r}
table_summary <- tbl_summary(
  data = mimic_icu_cohort,
  by = los_long,  
)
table_summary
```

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
set.seed(203)

# sort
mimiciv_icu_cohort <- mimic_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort |> select(-subject_id, -hadm_id, -stay_id), 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```

```{r}
train_set <- training(data_split) 
dim(train_set)
```
```{r}
test_set <- testing(data_split)
dim(test_set)
```
```{r}
recipe <- recipe(los_long ~ ., data = train_set) %>%
  # Impute missing values
  step_impute_mean(all_numeric(), -all_outcomes()) %>%
  step_impute_mode(all_nominal(), -all_outcomes()) %>%
  # Dummy variables for categorical predictors
  step_dummy(all_nominal(), -all_outcomes()) %>%
  # Normalize numeric predictors
  step_zv(all_numeric_predictors()) %>% 
  step_normalize(all_numeric(), -all_outcomes())
```

## Train and Tune Models

3. Train and tune the models using the training set.

### Logistic Regression
```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```
```{r}
logit_wf <- workflow() |>
  add_recipe(recipe) |>
  add_model(logit_mod)
logit_wf
```

```{r}
set.seed(203)

folds <- vfold_cv(train_set, v = 5)
```
```{r}

logit_grid <- grid_regular(
  penalty(range = c(-6, 1)), 
  mixture(),
  levels = c(50, 3)
  )
```

```{r}
file_path <- "logit_res.RData"

if (file.exists(file_path)) {
  load(file_path)
} else {
logit_res <- 
  tune_grid(
    object = logit_wf, 
    resamples = folds, 
    grid = logit_grid,
    control = control_stack_grid()
  )
save(logit_res, file = file_path)
}
```

```{r}
logit_res |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()
```
```{r}
best_logit <- logit_res |>
  select_best("roc_auc")
best_logit
```

### Random Forest
```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    # Number of predictors randomly sampled in each split
    mtry = tune(),
    # Number of trees in ensemble
    trees = tune()
  ) |>
  set_engine("ranger")
rf_mod
```
```{r}
rf_wf <- workflow() |>
  add_recipe(recipe) |>
  add_model(rf_mod)
rf_wf
```
```{r}
rf_grid <- grid_regular(
  trees(range = c(100L, 500L)), 
  mtry(range = c(1L, 5L)),
  levels = c(5, 5)
  )
```

```{r}
file_path <- "rf_res.RData"

if (file.exists(file_path)) {
  load(file_path)
} else {
  rf_res <- tune_grid(
    object = rf_wf, 
    resamples = folds, 
    grid = rf_grid,
    control = control_stack_grid()
  )
  
  save(rf_res, file = file_path)
}

```

```{r}
rf_res |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() + 
  # geom_line() + 
  labs(x = "Num. of Trees", y = "CV AUC")
```
```{r}
best_rf <- rf_res |>
  select_best("roc_auc")
best_rf
```

### Boost
```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 1000, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")
gb_mod
```
```{r}
gb_wf <- workflow() |>
  add_recipe(recipe) |>
  add_model(gb_mod)
gb_wf
```
```{r}
gb_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 10)
  )
```
```{r}
file_path <- "gb_res.RData"

if (file.exists(file_path)) {
  load(file_path)
} else {
  gb_res <- tune_grid(
    object = gb_wf, 
    resamples = folds, 
    grid = gb_grid,
    control = control_stack_grid()
  )
  
  save(gb_res, file = file_path)
}

```
```{r}
gb_res |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()
```
```{r}
best_gb <- gb_res |>
  select_best("roc_auc")
best_gb
```

### Model Stacking
```{r}
file_path <- "icu_model_st.RData"

if (file.exists(file_path)) {
  load(file_path)
} else {
icu_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  add_candidates(logit_res) |>
  add_candidates(rf_res) |>
  add_candidates(gb_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-6:2),
    metrics = c("roc_auc")
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
save(icu_model_st, file = file_path)
}
```
```{r}
icu_model_st
```
```{r}
autoplot(icu_model_st)
```
```{r}
autoplot(icu_model_st, type = "members")
```
```{r}
autoplot(icu_model_st, type = "weights")
```
## Model Performance
4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?


### Logstic Regression
```{r}
logit_wf_best <- logit_wf |>
  finalize_workflow(best_logit)

logit_best_fit <- 
  logit_wf_best |>
  last_fit(data_split)
logit_best_fit
```
```{r}
# Test metrics
logit_best_fit |> 
  collect_metrics()
```
```{r}
#Feature importance
fitted_workflow <- logit_best_fit$.workflow[[1]]
fitted_model <- extract_fit_parsnip(fitted_workflow)
tidy_coefficients <- tidy(fitted_model)

race_total <- tidy_coefficients  %>%
  filter(str_detect(term, "race_")) %>%
  summarise(term = "race", estimate = sum(abs(estimate)), 
            penalty = first(penalty))

gender_total <- tidy_coefficients  %>%
  filter(str_detect(term, "gender_")) %>%
  summarise(term = "gender", estimate = sum(abs(estimate)), 
            penalty = first(penalty))

insurance_total <- tidy_coefficients  %>%
  filter(str_detect(term, "insurance_")) %>%
  summarise(term = "insurance", estimate = sum(abs(estimate)), 
            penalty = first(penalty))

marital_status_total <- tidy_coefficients  %>%
  filter(str_detect(term, "marital_status_")) %>%
  summarise(term = "marital_status", estimate = sum(abs(estimate)), 
            penalty = first(penalty))

tidy_coefficients <- tidy_coefficients %>%
  filter(!str_detect(term, "race_"), !str_detect(term, "gender_"),
         !str_detect(term, "insurance_"), 
         !str_detect(term, "marital_status_")) %>%
  bind_rows(race_total, gender_total, 
            insurance_total, marital_status_total) %>%
  mutate(estimate = abs(estimate)) %>%
  arrange(desc(estimate))
  
tidy_coefficients

```

### Random Forest
```{r}
rf_wf_best <- rf_wf |>
  finalize_workflow(best_rf)

rf_best_fit <- 
  rf_wf_best |>
  last_fit(data_split)
rf_best_fit
```

```{r}
rf_best_fit |> 
  collect_metrics()
```

### Boost

```{r}
gb_best_wf <- gb_wf |>
  finalize_workflow(best_gb)

gb_best_fit <- 
  gb_best_wf |>
  last_fit(data_split)
```
```{r}
gb_best_fit |> 
  collect_metrics()
```

### Model Stacking
```{r}
icu_pred <- test_set %>%
  bind_cols(predict(icu_model_st, ., type = "prob")) %>%
  print(width = Inf)
```
```{r}

auc_result <- roc_auc(
  icu_pred,
  truth = los_long,  
  contains(".pred_FALSE")
)

print(auc_result)
```

```{r}
icu_pred$.pred_class <- ifelse(icu_pred$.pred_TRUE > 0.5, "TRUE", "FALSE")
icu_pred <- icu_pred |>
  mutate(.pred_class = as.factor(.pred_class))
accuracy_result <- accuracy(
  data = icu_pred,
  truth = los_long,  
  estimate = .pred_class 
)

print(accuracy_result)
```

### Model Performacne Comparision
```{r}
logit_metrics <- logit_best_fit |> 
  collect_metrics() %>%
  filter(.metric %in% c("roc_auc", "accuracy"))

rf_metrics <- rf_best_fit |> 
  collect_metrics() %>%
  filter(.metric %in% c("roc_auc", "accuracy"))

gb_metrics <- gb_best_fit |> 
  collect_metrics() %>%
  filter(.metric %in% c("roc_auc", "accuracy"))

stacking_auc <- auc_result$.estimate
stacking_accuracy <- accuracy_result$.estimate

model_performance <- tibble(
  Model = c("Logistic Regression", "Random Forest", "Boost", "Stacking Model"),
  AUC = c(logit_metrics$.estimate[logit_metrics$.metric == "roc_auc"], 
          rf_metrics$.estimate[rf_metrics$.metric == "roc_auc"], 
          gb_metrics$.estimate[gb_metrics$.metric == "roc_auc"], 
          stacking_auc),
  Accuracy = c(logit_metrics$.estimate[logit_metrics$.metric == "accuracy"], 
               rf_metrics$.estimate[rf_metrics$.metric == "accuracy"], 
               gb_metrics$.estimate[gb_metrics$.metric == "accuracy"], 
               stacking_accuracy)
)

print(model_performance)

```
**Model Performance Ranking: **
The Stacking Model performs the best in terms of both AUC and accuracy, followed by the Boosting Model, Random Forest, and Logistic Regression. This ranking indicates that combining multiple models through stacking effectively leverages their individual strengths, leading to improved predictive performance.

In terms of performance metrics (AUC and accuracy), all models have some ability to distinguish between classes, but none are exceptionally high. Besides, all models perform relatively close to each other, with only a marginal difference between the best and worst.


**Feature Importance and Interpretability:**
According to the feature importance analysis based on Logistic Regression model, the most significant features when deciding if a patient will stay in ICU for more than two days are `heart_rate`, `age_at_intime`, `non_invasive_blood_pressure_systolic`, `white_blood_cells` and `Hematocrit`. While features like `Bicarbonate`, `Glucose` and `non_invasive_blood_pressure_diastolic` basically have no effcet on the ICU stay.

In terms of interpretability, as the model becomes more complex, it will become less interpretable but offer a better performance. Logistic Regression, despite being the least accurate, offers the highest interpretability. Random Forest and Boosting Models, while more accurate, are less interpretable due to their complexity. The Stacking Model, despite its superior performance, is the least interpretable as it combines predictions from multiple models.