---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 23 @ 11:59PM"
author: "Wenbo Zhao 806074910"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: true    
editor_options: 
  chunk_output_type: inline
  
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(lubridate)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10013310 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**ANSWER:**

First we read the data and filter by subject_id:
```{r}
#Read the data for subject_id: 10013310
id <- 10013310
#id <- 10001217

data_path <- "~/mimic/hosp/"
patients_file_path <- paste0(data_path, "patients.csv.gz")
admissions_file_path <- paste0(data_path, "admissions.csv.gz")
transfers_file_path <- paste0(data_path, "transfers.csv.gz")
labevents_file_path <- paste0(data_path, "labevents.parquet")
procedures_icd_file_path <- paste0(data_path, "procedures_icd.csv.gz")
d_icd_procedures_file_path <- paste0(data_path, "d_icd_procedures.csv.gz")
diagnoses_icd_file_path <- paste0(data_path, "diagnoses_icd.csv.gz")
d_icd_diagnoses_file_path <- paste0(data_path, "d_icd_diagnoses.csv.gz")

patients_data <- read_csv(patients_file_path) %>%
  filter(subject_id == id)

admissions_data <- read_csv(admissions_file_path) %>%
  filter(subject_id == id)

transfers_data <- read_csv(transfers_file_path) %>%
  filter(subject_id == id)

labevents_dataset <- open_dataset("labevents_parquet", format = "parquet")
labevents_data <- labevents_dataset %>%
  filter(subject_id == id) %>%
  collect()

procedures_icd_data <- read_csv(procedures_icd_file_path) %>%
  filter(subject_id == id)

d_icd_procedures_data <- read_csv(d_icd_procedures_file_path)

diagnoses_icd_data <- read_csv(diagnoses_icd_file_path)%>%
  filter(subject_id == id)

d_icd_diagnoses_data <- read_csv(d_icd_diagnoses_file_path)

```
```{r}
#| eval: false
patients_data
admissions_data
transfers_data
labevents_data
procedures_icd_data
d_icd_procedures_data
diagnoses_icd_data
d_icd_diagnoses_data
```

We select the first admission data according to the `admittime`, this data is specified by `hadm_id`. Then we can extract ADT information.
```{r}
#ADT
#Select the first admission:
first_admission <- admissions_data %>%
  arrange(admittime) %>%
  slice(1)

first_hadm_id <- first_admission$hadm_id

transfers_first_admission <- transfers_data %>%
  filter(hadm_id == first_hadm_id & eventtype != "discharge")

#Decide if the transfer belongs to ICU/CCU
icu_ccu_pattern <- "ICU|CCU"
transfers_first_admission <- transfers_first_admission %>%
  mutate(icu_ccu = if_else(grepl(icu_ccu_pattern, careunit, ignore.case = TRUE),
                           "ICU/CCU", "Other"))

#ADT data for plot
adt_transfer_data <- transfers_first_admission %>%
  mutate(event_start = intime,
         event_end = outtime,
         ) %>%
  select(subject_id, hadm_id, eventtype, icu_ccu, careunit, event_start,
         event_end) %>%
  arrange(event_start)
```

Extract patient information:
```{r}
#Patient Information
race <- first_admission$race
age <- patients_data$anchor_age
gender <- patients_data$gender
title <- paste("Patient", id, ",", gender, ",", age, "years old,", race)
```

Extract lab events:
```{r}
#Lab Event
lab_data <- labevents_data %>%
  select(labevent_id, hadm_id, subject_id, charttime) %>%
  filter(hadm_id == first_hadm_id) %>%
  arrange(charttime)
```

Extract procedures:
```{r}
#Procedures
selected_procedures <- procedures_icd_data %>%
  select(subject_id, hadm_id, chartdate, icd_code) %>%
  filter(hadm_id == first_hadm_id)%>%
  left_join(d_icd_procedures_data, by = "icd_code") %>%
  select(subject_id, hadm_id, chartdate, icd_code, long_title)

selected_procedures$procedure_type <- as.factor(selected_procedures$long_title) 
selected_procedures$chartdate <- as.POSIXct(selected_procedures$chartdate, 
                                            tz = "UTC")

```

Find the top 3 diagnoses:
```{r}
#Diagnoses
selected_diagnoses <- diagnoses_icd_data %>%
  select(subject_id, hadm_id, icd_code) %>%
  filter(hadm_id == first_hadm_id)%>%
  left_join(d_icd_diagnoses_data, by = "icd_code") %>%
  select(subject_id, hadm_id, icd_code, long_title) %>%
  slice(1:3)

top_diagnoses_titles <- selected_diagnoses$long_title
subtitle <- paste(top_diagnoses_titles, collapse = "\n")
```

Plot the graph:
```{r}
# Plot
ggplot() +
  # ADT
  geom_segment(data = adt_transfer_data, 
               aes(x = event_start, xend = event_end,y = 'ADT', yend = 'ADT', 
                   color = careunit, size = icu_ccu), show.legend = TRUE) +
  scale_size_manual(values = c("ICU/CCU" = 5.0, "Other" = 1.0), guide = FALSE) +
  
  # LAB
  geom_point(data = lab_data, aes(x = charttime, y = 'LAB'), 
             shape = 3, size = 3, show.legend = FALSE) +
  
  # Procedure
  geom_point(data = selected_procedures, 
             aes(x = chartdate, y = 'Procedure', shape = procedure_type), 
             size = 3, show.legend = TRUE) +
  
  labs(title = title, subtitle = subtitle, x = "Calendar Time", y = "") +
  theme(legend.position = "bottom",
        legend.box = "vertical", 
        legend.box.background = element_rect(colour = "transparent"), 
        legend.margin = margin(t = 0, unit = "cm")) +
  guides(color = guide_legend(title = "Care Unit", 
                              override.aes = list(shape = NA), ncol = 3),
         shape = guide_legend(title = "Procedure", 
                              override.aes = list(linetype = "blank", size = 3), 
                              ncol = 1)) +
  scale_y_discrete(limits = c("ADT", "LAB", "Procedure"))

```


### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

**ANSWER:**
Read chartevent data:
```{r}
#Read chartevent data
chartevents_parquet <- open_dataset("chartevents_parquet", format = "parquet")
  
parquet_data <- chartevents_parquet %>%
  select(subject_id, stay_id, itemid, charttime, valuenum) %>%
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) 

chartevents_tibble <- parquet_data %>% collect()

d_items_data <- read_csv("~/mimic/icu/d_items.csv.gz")
d_items_data <- d_items_data %>%
  select(itemid, label, abbreviation)
ICU_stays_data <- chartevents_tibble %>%
  left_join(d_items_data, by = "itemid")
```

```{r}
#| eval: false
ICU_stays_data
```
Extract patient data based on `subject_id`:
```{r}
#Extract patient data
id <- 10013310
#id <- 10001217
patient_icu_stay <- ICU_stays_data %>%
  filter(subject_id == id)
```

For this plot, the point plot is abandoned for better readability.
```{r}
ggplot(data = patient_icu_stay) + 
  geom_line(mapping = aes(x = charttime, y = valuenum, color = abbreviation)) +
  #geom_point(mapping = aes(x = charttime, y = valuenum, 
  #color = abbreviation), size = 1) + 
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  labs(title = paste("Patient", id, "ICU stays - Vitals"),
       x = "Time",
       y = "Vital Value") +
  theme() +
  theme(legend.position = "none") + 
  guides(x = guide_axis(n.dodge = 2))

```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`. 
```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
icustays_tble
```


### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 
```{r}
unique_subjects <- icustays_tble %>% 
  summarise(unique_subjects = n_distinct(subject_id))
print(unique_subjects)
```
**ANSWER:** There are 50,920 unique `subject_id` in total.

```{r}
icu_stays_summary <- icustays_tble %>%
  group_by(subject_id) %>%
  summarise(icu_stays = n_distinct(stay_id)) %>%
  ungroup() 

head(icu_stays_summary 
     %>% arrange(desc(icu_stays)))
```
**ANSWER:** A `subject_id` can have multiple ICU stays.

```{r}
ggplot(icu_stays_summary, aes(x = icu_stays)) +
  geom_histogram(binwidth = 1, fill = "blue") +
  theme_bw() +
  labs(title = "Number of ICU Stays per Subject",
       x = "Number of ICU Stays",
       y = "Count of Subjects")
```
**ANSWER:** According to this graph summary, most of subjects have a number of ICU Stays less than 3. Number of ICU Stays equals to 1 takes up a significant portion.

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.
```{r}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
#head(admissions_tble)
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?) 

```{r}
#number of admissions per patient 
admissions_summary <- admissions_tble %>%
  group_by(subject_id) %>%
  summarise(admissions = n_distinct(hadm_id)) %>%
  ungroup() 

ggplot(admissions_summary, aes(x = admissions)) +
  geom_histogram(binwidth = 1, fill = "blue") +
  theme_bw() +
  labs(title = "Number of Admissions per Patient",
       x = "Number of Admissions",
       y = "Count of Patients")
```
**ANSWER:** 1. Number of patients keeps decreasing as the number of admissions increases. Most of patients have number of admissions which is less than 25.

```{r}
#admission hour
admission_time_summary <- admissions_tble %>%
  mutate(admission_hour = hour(admittime),
         admission_minute = minute(admittime),
         length_of_stay = as.numeric(difftime(dischtime, admittime, units = "days")))

ggplot(admission_time_summary, aes(x = admission_hour)) +
  geom_histogram(bins = 24, fill = "cornflowerblue", color = "black") +
  labs(title = "Distribution of Admission Hours",
       x = "Hour of the Day",
       y = "Frequency") +
  theme_bw()

#timezone <- attr(admissions_tble$admittime, "tzone")
#print(paste("Dataset timezone:", timezone))

```
**ANSWER:** 2. For admission hour, the dips appears in late evening after 2am and hour around 8 to 13. There is a peak in 7am which may reflect the routine admission activity of hospitals. The peaks during the evening hours might be unusual as they suggest a high volume of admissions outside the typical working hours of elective procedures. It might indicate a large number of emergency admissions during these times.

```{r}
# Visualize Admission Minute
ggplot(admission_time_summary, aes(x = admission_minute)) +
  geom_histogram(bins = 60, fill = "lightgreen", color = "black") +
  labs(title = "Distribution of Admission Minutes",
       x = "Minute of the Hour",
       y = "Frequency") +
  theme_bw()
```
**ANSWER:** 3. This graph depicts the distribution of admission minutes. There are significant spikes at the 0-minute mark and smaller ones at 15, 30, and 45 minutes after the hour. This pattern suggests that admissions are often recorded on the hour or at 15-minute intervals.

```{r}
# Visualize Length of Hospital Stay
ggplot(admission_time_summary, aes(x = length_of_stay)) +
  geom_histogram(binwidth = 1, fill = "salmon", color = "black") +
  labs(title = "Distribution of Length of Hospital Stay",
       x = "Length of Stay (Days)",
       y = "Frequency") +
  theme_bw()
```
**ANSWER:** 4. This graph indicates a long tail distribution of the hospital stay length. Most of patients stay in hospital for a duration which is less than 25 days. Meanwhile there are patients with very long stays. These could be outliers or cases that required prolonged treatment.

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.
```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```


### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.
```{r}
#Gender
ggplot(patients_tble, aes(x = gender)) +
  geom_bar(fill = "blue", color = "black") +
  labs(title = "Distribution of Patient's Gender",
       x = "Gender",
       y = "Counts") +
  theme_bw()
```
**ANSWER:** 1. The gender of patients is basically evenly distributed, with the number of female patients slightly bigger than that of male patients.

```{r}
#AGE
ggplot(patients_tble, aes(x = anchor_age)) +
  geom_histogram(binwidth = 1, fill = "darkorange", color = "black") +
  labs(title = "Distribution of Anchor Age",
       x = "Age",
       y = "Frequency") +
  theme_minimal()

```
**ANSWER:** 2. There are two peaks for age of patients around age 23 and age 91. The frequency of age around 30 and 75 are relatively small.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

- Length of ICU stay `los` vs the last available lab measurements before ICU stay

- Length of ICU stay `los` vs the average vital measurements within the first hour of ICU stay

- Length of ICU stay `los` vs first ICU unit

